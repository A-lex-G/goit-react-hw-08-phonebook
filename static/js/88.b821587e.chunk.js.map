{"version":3,"file":"static/js/88.b821587e.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","components/Loader/Loader.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/SearchInput/SearchInput.styled.jsx","components/SearchInput/SearchInput.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectFilterVal = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilterVal } from 'redux/filter/selectors';\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectContactsArr = state => state.contacts;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContactsArr, selectFilterVal],\n  ({ items }, filter) => {\n    if (items.length > 0) {\n      switch (true) {\n        case filter !== '':\n          return items.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          );\n        default:\n          return items;\n      }\n    } else {\n      return [];\n    }\n  }\n);\n","import { ProgressBar } from \"react-loader-spinner\";\n\nexport const Loader = () => {\n    <ProgressBar\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor='#F4442E'\n        barColor='#51E5FF'\n    />\n}","import styled from \"@emotion/styled\";\n\nexport const StyledListOfContacts = styled.ul`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    border: 1px solid var(--cornflower);\n    border-radius: 4px;\n    padding: 5px;\n    background-color: var(--light-slate);\n`\nexport const StyledContactItem = styled.li`\n    display: flex;\n    align-items: center;\n    column-gap: 10px;\n`\nexport const StyledDeleteButton = styled.button`\n    border: 1px solid var(--navy-blue);\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        background-color: tomato;\n        border: 1px solid var(--cornflower);\n    }\n}\n`","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact, fetchContacts } from \"redux/contacts/operations\";\nimport { selectContactsArr, selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { Loader } from \"components/Loader/Loader\";\nimport {\n    StyledListOfContacts,\n    StyledContactItem,\n    StyledDeleteButton\n} from \"./ContactsList.styled\";\nimport Notiflix from \"notiflix\";\n\nexport const ContactsList = () => {\n    \n    const dispatch = useDispatch();\n\n    const { isLoading, error } = useSelector(selectContactsArr);\n\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    const handleDeleteContact = ({id, name}) => {\n        dispatch(deleteContact(id));\n        Notiflix.Notify.success(`${name} was deleted from your contacts`);\n    }\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n    \n    return (\n        <>\n            {visibleContacts.length > 0 &&\n                <StyledListOfContacts>\n                    {isLoading &&\n                        <Loader />\n                    }\n                    {error &&\n                        <p>\n                            {error}\n                        </p>\n                    }\n                    {visibleContacts.map((contact) => (\n                        <StyledContactItem\n                            key={contact.id}>\n                            <p>\n                                {contact.name}:\n                                <span>\n                                    {contact.number}\n                                </span>\n                            </p>\n                            <StyledDeleteButton\n                                onClick={() => handleDeleteContact(contact)}\n                            >\n                                Delete\n                            </StyledDeleteButton>\n                        </StyledContactItem>\n                    ))}\n                </StyledListOfContacts>\n            }\n        </>\n    );\n};","import styled from \"@emotion/styled\";\n\nexport const StyledForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    row-gap: 5px;\n    width: 300px;\n    padding: 10px 10px;\n    border: 1px solid var(--cornflower);\n    border-radius: 4px;\n    background-color: var(--light-slate);\n`\nexport const StyledLabel = styled.label`\n    font-size: medium;\n    font-weight: 700;\n`\nexport const StyledInput = styled.input`\n    border: 1px solid var(--navy-blue);\n    border-radius: 4px;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        border: 1px solid tomato;\n    }\n`\nexport const StyledAddButton = styled.button`\n    border: 1px solid var(--navy-blue);\n    background-color: var(--cornflower);\n    border-radius: 4px;\n    margin-top: 20px;\n    cursor: pointer;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        background-color: tomato;\n        border: 1px solid var(--cornflower);\n    }\n`","import { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContactsArr } from \"redux/contacts/selectors\";\nimport {\n    StyledForm,\n    StyledLabel,\n    StyledInput,\n    StyledAddButton\n} from \"./Form.styled\";\nimport Notiflix from \"notiflix\";\n\nexport const Form = () => {\n    \n    const dispatch = useDispatch();\n\n    const {items} = useSelector(selectContactsArr);\n\n    const nameInputId = nanoid();\n\n    const numberInputId = nanoid();\n\n    const handleSubmitForm = (e) => {\n\n        e.preventDefault();\n\n        const form = e.target;\n        console.dir(form)\n        \n        const { value } = form.elements.name;\n\n        if ((items.map(contact => contact.name)).includes(value)) {\n            Notiflix.Notify.warning(`${value} is already in contacts`);\n            return\n        };\n\n        const contactData = {\n            [form.elements.name.name]: value,\n            [form.elements.number.name]: form.elements.number.value,\n        }\n        console.log(contactData)\n        \n        dispatch(addContact(contactData));\n\n        Notiflix.Notify.success(`${value} was added to your contacts`);\n\n        form.reset();\n    };\n\n    return (\n        <>\n            <StyledForm\n                onSubmit={handleSubmitForm}\n                action=\"\">\n                <StyledLabel\n                    htmlFor={nameInputId}>\n                    Name\n                </StyledLabel>\n                <StyledInput\n                    name=\"name\"\n                    id={nameInputId}\n                    type=\"text\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    placeholder=\"please enter name\"\n                    required\n                />\n                <StyledLabel\n                    htmlFor={numberInputId}>\n                    Number\n                </StyledLabel>\n                <StyledInput\n                    name=\"number\"\n                    id={numberInputId}\n                    type=\"tel\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    placeholder=\"please enter phone number\"\n                    required\n                />\n                <StyledAddButton\n                    type=\"submit\">\n                    Add contact\n                </StyledAddButton>\n            </StyledForm>\n        </>\n    );\n}","import styled from \"@emotion/styled\";\n\nexport const StyledSearchInputLabel = styled.label`\n    display: flex;\n    margin-bottom: 5px;\n    color: tomato;\n`\nexport const StyledSerchInput = styled.input`\n    border: 1px solid var(--navy-blue);\n    border-radius: 4px;\n    transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    :hover {\n        border: 1px solid tomato;\n    }\n`","import { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updFilter } from \"redux/filter/filterSlice\";\nimport { selectFilterVal } from \"redux/filter/selectors\";\nimport { StyledSearchInputLabel, StyledSerchInput } from \"./SearchInput.styled\";\n\nexport const SearchInput = () => {\n    \n    const dispatch = useDispatch();\n\n    const filter = useSelector(selectFilterVal);\n\n    const finderInputId = nanoid();\n\n    const handleSetState = (e) => {\n\n        const { value } = e.currentTarget;\n\n        e.preventDefault();\n        \n        dispatch(updFilter(value));\n    }\n\n    return (\n        <>\n            <StyledSearchInputLabel\n                htmlFor={finderInputId}>\n                Find contacts by name\n            </StyledSearchInputLabel>\n            <StyledSerchInput\n                type=\"text\"\n                name=\"filter\"\n                id={finderInputId}\n                value={filter}\n                onChange={handleSetState}\n                placeholder=\"please enter name to find\"\n                required\n            />\n        </>\n    )\n}","import { ContactsList } from \"components/ContactsList/ContactsList\";\nimport { Form } from \"components/Form/Form\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { SearchInput } from \"components/SearchInput/SearchInput\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectContactsArr, selectLoading } from \"redux/contacts/selectors\";\n\nexport default function Contacts() {\n\n    const dispatch = useDispatch();\n    \n    const isLoading = useSelector(selectLoading);\n    const { items } = useSelector(selectContactsArr);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch])\n    \n    return (\n        <>\n            <Form />\n            {isLoading &&\n                <Loader />\n            }\n            {items.length > 0 &&\n                <>\n                <SearchInput />\n                    <ContactsList />\n                </>\n            }\n        </>\n    )\n}"],"names":["selectFilterVal","state","filter","selectLoading","contacts","isLoading","selectContactsArr","selectVisibleContacts","createSelector","items","length","contact","name","toLowerCase","includes","Loader","StyledListOfContacts","styled","StyledContactItem","StyledDeleteButton","ContactsList","dispatch","useDispatch","useSelector","error","visibleContacts","useEffect","fetchContacts","map","number","onClick","id","deleteContact","Notiflix","handleDeleteContact","StyledForm","StyledLabel","StyledInput","StyledAddButton","Form","nameInputId","nanoid","numberInputId","onSubmit","e","preventDefault","form","target","console","dir","value","elements","contactData","log","addContact","reset","action","htmlFor","type","pattern","title","placeholder","required","StyledSearchInputLabel","StyledSerchInput","SearchInput","finderInputId","onChange","currentTarget","updFilter","Contacts"],"sourceRoot":""}